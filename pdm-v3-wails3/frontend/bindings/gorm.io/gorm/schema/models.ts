// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as clause$0 from "../clause/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as reflect$0 from "../../../reflect/models.js";

/**
 * DataType GORM data type
 */
export enum DataType {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero = "",

    /**
     * GORM fields types
     */
    Bool = "bool",
    Int = "int",
    Uint = "uint",
    Float = "float",
    String = "string",
    Time = "time",
    Bytes = "bytes",
};

/**
 * Field is the representation of model schema's field
 */
export class Field {
    "Name": string;
    "DBName": string;
    "BindNames": string[];
    "EmbeddedBindNames": string[];
    "DataType": DataType;
    "GORMDataType": DataType;
    "PrimaryKey": boolean;
    "AutoIncrement": boolean;
    "AutoIncrementIncrement": number;
    "Creatable": boolean;
    "Updatable": boolean;
    "Readable": boolean;
    "AutoCreateTime": TimeType;
    "AutoUpdateTime": TimeType;
    "HasDefaultValue": boolean;
    "DefaultValue": string;
    "DefaultValueInterface": any;
    "NotNull": boolean;
    "Unique": boolean;
    "Comment": string;
    "Size": number;
    "Precision": number;
    "Scale": number;
    "IgnoreMigration": boolean;
    "FieldType": reflect$0.Type;
    "IndirectFieldType": reflect$0.Type;
    "StructField": reflect$0.StructField;
    "Tag": reflect$0.StructTag;
    "TagSettings": { [_: string]: string };
    "Schema": Schema | null;
    "EmbeddedSchema": Schema | null;
    "OwnerSchema": Schema | null;
    "ReflectValueOf": any;
    "ValueOf": any;
    "Set": any;
    "Serializer": SerializerInterface;
    "NewValuePool": FieldNewValuePool;

    /**
     * In some db (e.g. MySQL), Unique and UniqueIndex are indistinguishable.
     * When a column has a (not Mul) UniqueIndex, Migrator always reports its gorm.ColumnType is Unique.
     * It causes field unnecessarily migration.
     * Therefore, we need to record the UniqueIndex on this column (exclude Mul UniqueIndex) for MigrateColumnUnique.
     */
    "UniqueIndex": string;

    /** Creates a new Field instance. */
    constructor($$source: Partial<Field> = {}) {
        if (!("Name" in $$source)) {
            this["Name"] = "";
        }
        if (!("DBName" in $$source)) {
            this["DBName"] = "";
        }
        if (!("BindNames" in $$source)) {
            this["BindNames"] = [];
        }
        if (!("EmbeddedBindNames" in $$source)) {
            this["EmbeddedBindNames"] = [];
        }
        if (!("DataType" in $$source)) {
            this["DataType"] = ("" as DataType);
        }
        if (!("GORMDataType" in $$source)) {
            this["GORMDataType"] = ("" as DataType);
        }
        if (!("PrimaryKey" in $$source)) {
            this["PrimaryKey"] = false;
        }
        if (!("AutoIncrement" in $$source)) {
            this["AutoIncrement"] = false;
        }
        if (!("AutoIncrementIncrement" in $$source)) {
            this["AutoIncrementIncrement"] = 0;
        }
        if (!("Creatable" in $$source)) {
            this["Creatable"] = false;
        }
        if (!("Updatable" in $$source)) {
            this["Updatable"] = false;
        }
        if (!("Readable" in $$source)) {
            this["Readable"] = false;
        }
        if (!("AutoCreateTime" in $$source)) {
            this["AutoCreateTime"] = (0 as TimeType);
        }
        if (!("AutoUpdateTime" in $$source)) {
            this["AutoUpdateTime"] = (0 as TimeType);
        }
        if (!("HasDefaultValue" in $$source)) {
            this["HasDefaultValue"] = false;
        }
        if (!("DefaultValue" in $$source)) {
            this["DefaultValue"] = "";
        }
        if (!("DefaultValueInterface" in $$source)) {
            this["DefaultValueInterface"] = null;
        }
        if (!("NotNull" in $$source)) {
            this["NotNull"] = false;
        }
        if (!("Unique" in $$source)) {
            this["Unique"] = false;
        }
        if (!("Comment" in $$source)) {
            this["Comment"] = "";
        }
        if (!("Size" in $$source)) {
            this["Size"] = 0;
        }
        if (!("Precision" in $$source)) {
            this["Precision"] = 0;
        }
        if (!("Scale" in $$source)) {
            this["Scale"] = 0;
        }
        if (!("IgnoreMigration" in $$source)) {
            this["IgnoreMigration"] = false;
        }
        if (!("FieldType" in $$source)) {
            this["FieldType"] = null;
        }
        if (!("IndirectFieldType" in $$source)) {
            this["IndirectFieldType"] = null;
        }
        if (!("StructField" in $$source)) {
            this["StructField"] = (new reflect$0.StructField());
        }
        if (!("Tag" in $$source)) {
            this["Tag"] = ("" as reflect$0.StructTag);
        }
        if (!("TagSettings" in $$source)) {
            this["TagSettings"] = {};
        }
        if (!("Schema" in $$source)) {
            this["Schema"] = null;
        }
        if (!("EmbeddedSchema" in $$source)) {
            this["EmbeddedSchema"] = null;
        }
        if (!("OwnerSchema" in $$source)) {
            this["OwnerSchema"] = null;
        }
        if (!("ReflectValueOf" in $$source)) {
            this["ReflectValueOf"] = null;
        }
        if (!("ValueOf" in $$source)) {
            this["ValueOf"] = null;
        }
        if (!("Set" in $$source)) {
            this["Set"] = null;
        }
        if (!("Serializer" in $$source)) {
            this["Serializer"] = null;
        }
        if (!("NewValuePool" in $$source)) {
            this["NewValuePool"] = null;
        }
        if (!("UniqueIndex" in $$source)) {
            this["UniqueIndex"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Field instance from a string or object.
     */
    static createFrom($$source: any = {}): Field {
        const $$createField2_0 = $$createType0;
        const $$createField3_0 = $$createType0;
        const $$createField26_0 = $$createType1;
        const $$createField28_0 = $$createType2;
        const $$createField29_0 = $$createType4;
        const $$createField30_0 = $$createType4;
        const $$createField31_0 = $$createType4;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("BindNames" in $$parsedSource) {
            $$parsedSource["BindNames"] = $$createField2_0($$parsedSource["BindNames"]);
        }
        if ("EmbeddedBindNames" in $$parsedSource) {
            $$parsedSource["EmbeddedBindNames"] = $$createField3_0($$parsedSource["EmbeddedBindNames"]);
        }
        if ("StructField" in $$parsedSource) {
            $$parsedSource["StructField"] = $$createField26_0($$parsedSource["StructField"]);
        }
        if ("TagSettings" in $$parsedSource) {
            $$parsedSource["TagSettings"] = $$createField28_0($$parsedSource["TagSettings"]);
        }
        if ("Schema" in $$parsedSource) {
            $$parsedSource["Schema"] = $$createField29_0($$parsedSource["Schema"]);
        }
        if ("EmbeddedSchema" in $$parsedSource) {
            $$parsedSource["EmbeddedSchema"] = $$createField30_0($$parsedSource["EmbeddedSchema"]);
        }
        if ("OwnerSchema" in $$parsedSource) {
            $$parsedSource["OwnerSchema"] = $$createField31_0($$parsedSource["OwnerSchema"]);
        }
        return new Field($$parsedSource as Partial<Field>);
    }
}

/**
 * FieldNewValuePool field new scan value pool
 */
export type FieldNewValuePool = any;

/**
 * Namer namer interface
 */
export type Namer = any;

export class Polymorphic {
    "PolymorphicID": Field | null;
    "PolymorphicType": Field | null;
    "Value": string;

    /** Creates a new Polymorphic instance. */
    constructor($$source: Partial<Polymorphic> = {}) {
        if (!("PolymorphicID" in $$source)) {
            this["PolymorphicID"] = null;
        }
        if (!("PolymorphicType" in $$source)) {
            this["PolymorphicType"] = null;
        }
        if (!("Value" in $$source)) {
            this["Value"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Polymorphic instance from a string or object.
     */
    static createFrom($$source: any = {}): Polymorphic {
        const $$createField0_0 = $$createType6;
        const $$createField1_0 = $$createType6;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("PolymorphicID" in $$parsedSource) {
            $$parsedSource["PolymorphicID"] = $$createField0_0($$parsedSource["PolymorphicID"]);
        }
        if ("PolymorphicType" in $$parsedSource) {
            $$parsedSource["PolymorphicType"] = $$createField1_0($$parsedSource["PolymorphicType"]);
        }
        return new Polymorphic($$parsedSource as Partial<Polymorphic>);
    }
}

export class Reference {
    "PrimaryKey": Field | null;
    "PrimaryValue": string;
    "ForeignKey": Field | null;
    "OwnPrimaryKey": boolean;

    /** Creates a new Reference instance. */
    constructor($$source: Partial<Reference> = {}) {
        if (!("PrimaryKey" in $$source)) {
            this["PrimaryKey"] = null;
        }
        if (!("PrimaryValue" in $$source)) {
            this["PrimaryValue"] = "";
        }
        if (!("ForeignKey" in $$source)) {
            this["ForeignKey"] = null;
        }
        if (!("OwnPrimaryKey" in $$source)) {
            this["OwnPrimaryKey"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Reference instance from a string or object.
     */
    static createFrom($$source: any = {}): Reference {
        const $$createField0_0 = $$createType6;
        const $$createField2_0 = $$createType6;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("PrimaryKey" in $$parsedSource) {
            $$parsedSource["PrimaryKey"] = $$createField0_0($$parsedSource["PrimaryKey"]);
        }
        if ("ForeignKey" in $$parsedSource) {
            $$parsedSource["ForeignKey"] = $$createField2_0($$parsedSource["ForeignKey"]);
        }
        return new Reference($$parsedSource as Partial<Reference>);
    }
}

export class Relationship {
    "Name": string;
    "Type": RelationshipType;
    "Field": Field | null;
    "Polymorphic": Polymorphic | null;
    "References": (Reference | null)[];
    "Schema": Schema | null;
    "FieldSchema": Schema | null;
    "JoinTable": Schema | null;

    /** Creates a new Relationship instance. */
    constructor($$source: Partial<Relationship> = {}) {
        if (!("Name" in $$source)) {
            this["Name"] = "";
        }
        if (!("Type" in $$source)) {
            this["Type"] = ("" as RelationshipType);
        }
        if (!("Field" in $$source)) {
            this["Field"] = null;
        }
        if (!("Polymorphic" in $$source)) {
            this["Polymorphic"] = null;
        }
        if (!("References" in $$source)) {
            this["References"] = [];
        }
        if (!("Schema" in $$source)) {
            this["Schema"] = null;
        }
        if (!("FieldSchema" in $$source)) {
            this["FieldSchema"] = null;
        }
        if (!("JoinTable" in $$source)) {
            this["JoinTable"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Relationship instance from a string or object.
     */
    static createFrom($$source: any = {}): Relationship {
        const $$createField2_0 = $$createType6;
        const $$createField3_0 = $$createType8;
        const $$createField4_0 = $$createType11;
        const $$createField5_0 = $$createType4;
        const $$createField6_0 = $$createType4;
        const $$createField7_0 = $$createType4;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("Field" in $$parsedSource) {
            $$parsedSource["Field"] = $$createField2_0($$parsedSource["Field"]);
        }
        if ("Polymorphic" in $$parsedSource) {
            $$parsedSource["Polymorphic"] = $$createField3_0($$parsedSource["Polymorphic"]);
        }
        if ("References" in $$parsedSource) {
            $$parsedSource["References"] = $$createField4_0($$parsedSource["References"]);
        }
        if ("Schema" in $$parsedSource) {
            $$parsedSource["Schema"] = $$createField5_0($$parsedSource["Schema"]);
        }
        if ("FieldSchema" in $$parsedSource) {
            $$parsedSource["FieldSchema"] = $$createField6_0($$parsedSource["FieldSchema"]);
        }
        if ("JoinTable" in $$parsedSource) {
            $$parsedSource["JoinTable"] = $$createField7_0($$parsedSource["JoinTable"]);
        }
        return new Relationship($$parsedSource as Partial<Relationship>);
    }
}

/**
 * RelationshipType relationship type
 */
export enum RelationshipType {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero = "",

    /**
     * HasOneRel has one relationship
     */
    HasOne = "has_one",

    /**
     * HasManyRel has many relationship
     */
    HasMany = "has_many",

    /**
     * BelongsToRel belongs to relationship
     */
    BelongsTo = "belongs_to",

    /**
     * Many2ManyRel many to many relationship
     */
    Many2Many = "many_to_many",
    has = "has",
};

export class Relationships {
    "HasOne": (Relationship | null)[];
    "BelongsTo": (Relationship | null)[];
    "HasMany": (Relationship | null)[];
    "Many2Many": (Relationship | null)[];
    "Relations": { [_: string]: Relationship | null };
    "EmbeddedRelations": { [_: string]: Relationships | null };

    /** Creates a new Relationships instance. */
    constructor($$source: Partial<Relationships> = {}) {
        if (!("HasOne" in $$source)) {
            this["HasOne"] = [];
        }
        if (!("BelongsTo" in $$source)) {
            this["BelongsTo"] = [];
        }
        if (!("HasMany" in $$source)) {
            this["HasMany"] = [];
        }
        if (!("Many2Many" in $$source)) {
            this["Many2Many"] = [];
        }
        if (!("Relations" in $$source)) {
            this["Relations"] = {};
        }
        if (!("EmbeddedRelations" in $$source)) {
            this["EmbeddedRelations"] = {};
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Relationships instance from a string or object.
     */
    static createFrom($$source: any = {}): Relationships {
        const $$createField0_0 = $$createType14;
        const $$createField1_0 = $$createType14;
        const $$createField2_0 = $$createType14;
        const $$createField3_0 = $$createType14;
        const $$createField4_0 = $$createType15;
        const $$createField5_0 = $$createType18;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("HasOne" in $$parsedSource) {
            $$parsedSource["HasOne"] = $$createField0_0($$parsedSource["HasOne"]);
        }
        if ("BelongsTo" in $$parsedSource) {
            $$parsedSource["BelongsTo"] = $$createField1_0($$parsedSource["BelongsTo"]);
        }
        if ("HasMany" in $$parsedSource) {
            $$parsedSource["HasMany"] = $$createField2_0($$parsedSource["HasMany"]);
        }
        if ("Many2Many" in $$parsedSource) {
            $$parsedSource["Many2Many"] = $$createField3_0($$parsedSource["Many2Many"]);
        }
        if ("Relations" in $$parsedSource) {
            $$parsedSource["Relations"] = $$createField4_0($$parsedSource["Relations"]);
        }
        if ("EmbeddedRelations" in $$parsedSource) {
            $$parsedSource["EmbeddedRelations"] = $$createField5_0($$parsedSource["EmbeddedRelations"]);
        }
        return new Relationships($$parsedSource as Partial<Relationships>);
    }
}

export class Schema {
    "Name": string;
    "ModelType": reflect$0.Type;
    "Table": string;
    "PrioritizedPrimaryField": Field | null;
    "DBNames": string[];
    "PrimaryFields": (Field | null)[];
    "PrimaryFieldDBNames": string[];
    "Fields": (Field | null)[];
    "FieldsByName": { [_: string]: Field | null };

    /**
     * embedded fields is 'Embed.Field'
     */
    "FieldsByBindName": { [_: string]: Field | null };
    "FieldsByDBName": { [_: string]: Field | null };

    /**
     * fields with default value assigned by database
     */
    "FieldsWithDefaultDBValue": (Field | null)[];
    "Relationships": Relationships;
    "CreateClauses": clause$0.Interface[];
    "QueryClauses": clause$0.Interface[];
    "UpdateClauses": clause$0.Interface[];
    "DeleteClauses": clause$0.Interface[];
    "BeforeCreate": boolean;
    "AfterCreate": boolean;
    "BeforeUpdate": boolean;
    "AfterUpdate": boolean;
    "BeforeDelete": boolean;
    "AfterDelete": boolean;
    "BeforeSave": boolean;
    "AfterSave": boolean;
    "AfterFind": boolean;

    /** Creates a new Schema instance. */
    constructor($$source: Partial<Schema> = {}) {
        if (!("Name" in $$source)) {
            this["Name"] = "";
        }
        if (!("ModelType" in $$source)) {
            this["ModelType"] = null;
        }
        if (!("Table" in $$source)) {
            this["Table"] = "";
        }
        if (!("PrioritizedPrimaryField" in $$source)) {
            this["PrioritizedPrimaryField"] = null;
        }
        if (!("DBNames" in $$source)) {
            this["DBNames"] = [];
        }
        if (!("PrimaryFields" in $$source)) {
            this["PrimaryFields"] = [];
        }
        if (!("PrimaryFieldDBNames" in $$source)) {
            this["PrimaryFieldDBNames"] = [];
        }
        if (!("Fields" in $$source)) {
            this["Fields"] = [];
        }
        if (!("FieldsByName" in $$source)) {
            this["FieldsByName"] = {};
        }
        if (!("FieldsByBindName" in $$source)) {
            this["FieldsByBindName"] = {};
        }
        if (!("FieldsByDBName" in $$source)) {
            this["FieldsByDBName"] = {};
        }
        if (!("FieldsWithDefaultDBValue" in $$source)) {
            this["FieldsWithDefaultDBValue"] = [];
        }
        if (!("Relationships" in $$source)) {
            this["Relationships"] = (new Relationships());
        }
        if (!("CreateClauses" in $$source)) {
            this["CreateClauses"] = [];
        }
        if (!("QueryClauses" in $$source)) {
            this["QueryClauses"] = [];
        }
        if (!("UpdateClauses" in $$source)) {
            this["UpdateClauses"] = [];
        }
        if (!("DeleteClauses" in $$source)) {
            this["DeleteClauses"] = [];
        }
        if (!("BeforeCreate" in $$source)) {
            this["BeforeCreate"] = false;
        }
        if (!("AfterCreate" in $$source)) {
            this["AfterCreate"] = false;
        }
        if (!("BeforeUpdate" in $$source)) {
            this["BeforeUpdate"] = false;
        }
        if (!("AfterUpdate" in $$source)) {
            this["AfterUpdate"] = false;
        }
        if (!("BeforeDelete" in $$source)) {
            this["BeforeDelete"] = false;
        }
        if (!("AfterDelete" in $$source)) {
            this["AfterDelete"] = false;
        }
        if (!("BeforeSave" in $$source)) {
            this["BeforeSave"] = false;
        }
        if (!("AfterSave" in $$source)) {
            this["AfterSave"] = false;
        }
        if (!("AfterFind" in $$source)) {
            this["AfterFind"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Schema instance from a string or object.
     */
    static createFrom($$source: any = {}): Schema {
        const $$createField3_0 = $$createType6;
        const $$createField4_0 = $$createType0;
        const $$createField5_0 = $$createType19;
        const $$createField6_0 = $$createType0;
        const $$createField7_0 = $$createType19;
        const $$createField8_0 = $$createType20;
        const $$createField9_0 = $$createType20;
        const $$createField10_0 = $$createType20;
        const $$createField11_0 = $$createType19;
        const $$createField12_0 = $$createType16;
        const $$createField13_0 = $$createType21;
        const $$createField14_0 = $$createType21;
        const $$createField15_0 = $$createType21;
        const $$createField16_0 = $$createType21;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("PrioritizedPrimaryField" in $$parsedSource) {
            $$parsedSource["PrioritizedPrimaryField"] = $$createField3_0($$parsedSource["PrioritizedPrimaryField"]);
        }
        if ("DBNames" in $$parsedSource) {
            $$parsedSource["DBNames"] = $$createField4_0($$parsedSource["DBNames"]);
        }
        if ("PrimaryFields" in $$parsedSource) {
            $$parsedSource["PrimaryFields"] = $$createField5_0($$parsedSource["PrimaryFields"]);
        }
        if ("PrimaryFieldDBNames" in $$parsedSource) {
            $$parsedSource["PrimaryFieldDBNames"] = $$createField6_0($$parsedSource["PrimaryFieldDBNames"]);
        }
        if ("Fields" in $$parsedSource) {
            $$parsedSource["Fields"] = $$createField7_0($$parsedSource["Fields"]);
        }
        if ("FieldsByName" in $$parsedSource) {
            $$parsedSource["FieldsByName"] = $$createField8_0($$parsedSource["FieldsByName"]);
        }
        if ("FieldsByBindName" in $$parsedSource) {
            $$parsedSource["FieldsByBindName"] = $$createField9_0($$parsedSource["FieldsByBindName"]);
        }
        if ("FieldsByDBName" in $$parsedSource) {
            $$parsedSource["FieldsByDBName"] = $$createField10_0($$parsedSource["FieldsByDBName"]);
        }
        if ("FieldsWithDefaultDBValue" in $$parsedSource) {
            $$parsedSource["FieldsWithDefaultDBValue"] = $$createField11_0($$parsedSource["FieldsWithDefaultDBValue"]);
        }
        if ("Relationships" in $$parsedSource) {
            $$parsedSource["Relationships"] = $$createField12_0($$parsedSource["Relationships"]);
        }
        if ("CreateClauses" in $$parsedSource) {
            $$parsedSource["CreateClauses"] = $$createField13_0($$parsedSource["CreateClauses"]);
        }
        if ("QueryClauses" in $$parsedSource) {
            $$parsedSource["QueryClauses"] = $$createField14_0($$parsedSource["QueryClauses"]);
        }
        if ("UpdateClauses" in $$parsedSource) {
            $$parsedSource["UpdateClauses"] = $$createField15_0($$parsedSource["UpdateClauses"]);
        }
        if ("DeleteClauses" in $$parsedSource) {
            $$parsedSource["DeleteClauses"] = $$createField16_0($$parsedSource["DeleteClauses"]);
        }
        return new Schema($$parsedSource as Partial<Schema>);
    }
}

/**
 * SerializerInterface serializer interface
 */
export type SerializerInterface = any;

/**
 * TimeType GORM time type
 */
export enum TimeType {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero = 0,

    /**
     * GORM time types
     */
    UnixTime = 1,
    UnixSecond = 2,
    UnixMillisecond = 3,
    UnixNanosecond = 4,
};

// Private type creation functions
const $$createType0 = $Create.Array($Create.Any);
const $$createType1 = reflect$0.StructField.createFrom;
const $$createType2 = $Create.Map($Create.Any, $Create.Any);
const $$createType3 = Schema.createFrom;
const $$createType4 = $Create.Nullable($$createType3);
const $$createType5 = Field.createFrom;
const $$createType6 = $Create.Nullable($$createType5);
const $$createType7 = Polymorphic.createFrom;
const $$createType8 = $Create.Nullable($$createType7);
const $$createType9 = Reference.createFrom;
const $$createType10 = $Create.Nullable($$createType9);
const $$createType11 = $Create.Array($$createType10);
const $$createType12 = Relationship.createFrom;
const $$createType13 = $Create.Nullable($$createType12);
const $$createType14 = $Create.Array($$createType13);
const $$createType15 = $Create.Map($Create.Any, $$createType13);
const $$createType16 = Relationships.createFrom;
const $$createType17 = $Create.Nullable($$createType16);
const $$createType18 = $Create.Map($Create.Any, $$createType17);
const $$createType19 = $Create.Array($$createType6);
const $$createType20 = $Create.Map($Create.Any, $$createType6);
const $$createType21 = $Create.Array($Create.Any);
