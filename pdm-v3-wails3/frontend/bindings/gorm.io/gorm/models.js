// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as context$0 from "../../context/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as clause$0 from "./clause/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as logger$0 from "./logger/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as schema$0 from "./schema/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as reflect$0 from "../../reflect/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as strings$0 from "../../strings/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as sync$0 from "../../sync/models.js";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as $internal from "./internal.js";

/**
 * ConnPool db conns pool interface
 * @typedef {any} ConnPool
 */

/**
 * DB GORM DB definition
 */
export class DB {
    /**
     * Creates a new DB instance.
     * @param {Partial<DB>} [$$source = {}] - The source object to create the DB.
     */
    constructor($$source = {}) {
        if (!("SkipDefaultTransaction" in $$source)) {
            /**
             * GORM perform single create, update, delete operations in transactions by default to ensure database data integrity
             * You can disable it by setting `SkipDefaultTransaction` to true
             * @member
             * @type {boolean}
             */
            this["SkipDefaultTransaction"] = false;
        }
        if (!("NamingStrategy" in $$source)) {
            /**
             * NamingStrategy tables, columns naming strategy
             * @member
             * @type {schema$0.Namer}
             */
            this["NamingStrategy"] = null;
        }
        if (!("FullSaveAssociations" in $$source)) {
            /**
             * FullSaveAssociations full save associations
             * @member
             * @type {boolean}
             */
            this["FullSaveAssociations"] = false;
        }
        if (!("Logger" in $$source)) {
            /**
             * Logger
             * @member
             * @type {logger$0.Interface}
             */
            this["Logger"] = null;
        }
        if (!("NowFunc" in $$source)) {
            /**
             * NowFunc the function to be used when creating a new timestamp
             * @member
             * @type {any}
             */
            this["NowFunc"] = null;
        }
        if (!("DryRun" in $$source)) {
            /**
             * DryRun generate sql without execute
             * @member
             * @type {boolean}
             */
            this["DryRun"] = false;
        }
        if (!("PrepareStmt" in $$source)) {
            /**
             * PrepareStmt executes the given query in cached statement
             * @member
             * @type {boolean}
             */
            this["PrepareStmt"] = false;
        }
        if (!("DisableAutomaticPing" in $$source)) {
            /**
             * DisableAutomaticPing
             * @member
             * @type {boolean}
             */
            this["DisableAutomaticPing"] = false;
        }
        if (!("DisableForeignKeyConstraintWhenMigrating" in $$source)) {
            /**
             * DisableForeignKeyConstraintWhenMigrating
             * @member
             * @type {boolean}
             */
            this["DisableForeignKeyConstraintWhenMigrating"] = false;
        }
        if (!("IgnoreRelationshipsWhenMigrating" in $$source)) {
            /**
             * IgnoreRelationshipsWhenMigrating
             * @member
             * @type {boolean}
             */
            this["IgnoreRelationshipsWhenMigrating"] = false;
        }
        if (!("DisableNestedTransaction" in $$source)) {
            /**
             * DisableNestedTransaction disable nested transaction
             * @member
             * @type {boolean}
             */
            this["DisableNestedTransaction"] = false;
        }
        if (!("AllowGlobalUpdate" in $$source)) {
            /**
             * AllowGlobalUpdate allow global update
             * @member
             * @type {boolean}
             */
            this["AllowGlobalUpdate"] = false;
        }
        if (!("QueryFields" in $$source)) {
            /**
             * QueryFields executes the SQL query with all fields of the table
             * @member
             * @type {boolean}
             */
            this["QueryFields"] = false;
        }
        if (!("CreateBatchSize" in $$source)) {
            /**
             * CreateBatchSize default create batch size
             * @member
             * @type {number}
             */
            this["CreateBatchSize"] = 0;
        }
        if (!("TranslateError" in $$source)) {
            /**
             * TranslateError enabling error translation
             * @member
             * @type {boolean}
             */
            this["TranslateError"] = false;
        }
        if (!("PropagateUnscoped" in $$source)) {
            /**
             * PropagateUnscoped propagate Unscoped to every other nested statement
             * @member
             * @type {boolean}
             */
            this["PropagateUnscoped"] = false;
        }
        if (!("ClauseBuilders" in $$source)) {
            /**
             * ClauseBuilders clause builder
             * @member
             * @type {{ [_: string]: clause$0.ClauseBuilder }}
             */
            this["ClauseBuilders"] = {};
        }
        if (!("ConnPool" in $$source)) {
            /**
             * ConnPool db conn pool
             * @member
             * @type {ConnPool}
             */
            this["ConnPool"] = null;
        }
        if (!("Dialector" in $$source)) {
            /**
             * Dialector database dialector
             * @member
             * @type {Dialector}
             */
            this["Dialector"] = null;
        }
        if (!("Plugins" in $$source)) {
            /**
             * Plugins registered plugins
             * @member
             * @type {{ [_: string]: Plugin }}
             */
            this["Plugins"] = {};
        }
        if (!("Error" in $$source)) {
            /**
             * @member
             * @type {any}
             */
            this["Error"] = null;
        }
        if (!("RowsAffected" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["RowsAffected"] = 0;
        }
        if (!("Statement" in $$source)) {
            /**
             * @member
             * @type {Statement | null}
             */
            this["Statement"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new DB instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {DB}
     */
    static createFrom($$source = {}) {
        const $$createField16_0 = $$createType0;
        const $$createField19_0 = $$createType1;
        const $$createField22_0 = $$createType3;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("ClauseBuilders" in $$parsedSource) {
            $$parsedSource["ClauseBuilders"] = $$createField16_0($$parsedSource["ClauseBuilders"]);
        }
        if ("Plugins" in $$parsedSource) {
            $$parsedSource["Plugins"] = $$createField19_0($$parsedSource["Plugins"]);
        }
        if ("Statement" in $$parsedSource) {
            $$parsedSource["Statement"] = $$createField22_0($$parsedSource["Statement"]);
        }
        return new DB(/** @type {Partial<DB>} */($$parsedSource));
    }
}

/**
 * Dialector GORM database dialector
 * @typedef {any} Dialector
 */

/**
 * Plugin GORM plugin interface
 * @typedef {any} Plugin
 */

/**
 * Statement statement
 */
export class Statement {
    /**
     * Creates a new Statement instance.
     * @param {Partial<Statement>} [$$source = {}] - The source object to create the Statement.
     */
    constructor($$source = {}) {
        if (!("SkipDefaultTransaction" in $$source)) {
            /**
             * GORM perform single create, update, delete operations in transactions by default to ensure database data integrity
             * You can disable it by setting `SkipDefaultTransaction` to true
             * @member
             * @type {boolean}
             */
            this["SkipDefaultTransaction"] = false;
        }
        if (!("NamingStrategy" in $$source)) {
            /**
             * NamingStrategy tables, columns naming strategy
             * @member
             * @type {schema$0.Namer}
             */
            this["NamingStrategy"] = null;
        }
        if (!("FullSaveAssociations" in $$source)) {
            /**
             * FullSaveAssociations full save associations
             * @member
             * @type {boolean}
             */
            this["FullSaveAssociations"] = false;
        }
        if (!("Logger" in $$source)) {
            /**
             * Logger
             * @member
             * @type {logger$0.Interface}
             */
            this["Logger"] = null;
        }
        if (!("NowFunc" in $$source)) {
            /**
             * NowFunc the function to be used when creating a new timestamp
             * @member
             * @type {any}
             */
            this["NowFunc"] = null;
        }
        if (!("DryRun" in $$source)) {
            /**
             * DryRun generate sql without execute
             * @member
             * @type {boolean}
             */
            this["DryRun"] = false;
        }
        if (!("PrepareStmt" in $$source)) {
            /**
             * PrepareStmt executes the given query in cached statement
             * @member
             * @type {boolean}
             */
            this["PrepareStmt"] = false;
        }
        if (!("DisableAutomaticPing" in $$source)) {
            /**
             * DisableAutomaticPing
             * @member
             * @type {boolean}
             */
            this["DisableAutomaticPing"] = false;
        }
        if (!("DisableForeignKeyConstraintWhenMigrating" in $$source)) {
            /**
             * DisableForeignKeyConstraintWhenMigrating
             * @member
             * @type {boolean}
             */
            this["DisableForeignKeyConstraintWhenMigrating"] = false;
        }
        if (!("IgnoreRelationshipsWhenMigrating" in $$source)) {
            /**
             * IgnoreRelationshipsWhenMigrating
             * @member
             * @type {boolean}
             */
            this["IgnoreRelationshipsWhenMigrating"] = false;
        }
        if (!("DisableNestedTransaction" in $$source)) {
            /**
             * DisableNestedTransaction disable nested transaction
             * @member
             * @type {boolean}
             */
            this["DisableNestedTransaction"] = false;
        }
        if (!("AllowGlobalUpdate" in $$source)) {
            /**
             * AllowGlobalUpdate allow global update
             * @member
             * @type {boolean}
             */
            this["AllowGlobalUpdate"] = false;
        }
        if (!("QueryFields" in $$source)) {
            /**
             * QueryFields executes the SQL query with all fields of the table
             * @member
             * @type {boolean}
             */
            this["QueryFields"] = false;
        }
        if (!("CreateBatchSize" in $$source)) {
            /**
             * CreateBatchSize default create batch size
             * @member
             * @type {number}
             */
            this["CreateBatchSize"] = 0;
        }
        if (!("TranslateError" in $$source)) {
            /**
             * TranslateError enabling error translation
             * @member
             * @type {boolean}
             */
            this["TranslateError"] = false;
        }
        if (!("PropagateUnscoped" in $$source)) {
            /**
             * PropagateUnscoped propagate Unscoped to every other nested statement
             * @member
             * @type {boolean}
             */
            this["PropagateUnscoped"] = false;
        }
        if (!("ClauseBuilders" in $$source)) {
            /**
             * ClauseBuilders clause builder
             * @member
             * @type {{ [_: string]: clause$0.ClauseBuilder }}
             */
            this["ClauseBuilders"] = {};
        }
        if (!("Dialector" in $$source)) {
            /**
             * Dialector database dialector
             * @member
             * @type {Dialector}
             */
            this["Dialector"] = null;
        }
        if (!("Plugins" in $$source)) {
            /**
             * Plugins registered plugins
             * @member
             * @type {{ [_: string]: Plugin }}
             */
            this["Plugins"] = {};
        }
        if (!("Error" in $$source)) {
            /**
             * @member
             * @type {any}
             */
            this["Error"] = null;
        }
        if (!("RowsAffected" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["RowsAffected"] = 0;
        }
        if (!("Statement" in $$source)) {
            /**
             * @member
             * @type {Statement | null}
             */
            this["Statement"] = null;
        }
        if (!("TableExpr" in $$source)) {
            /**
             * @member
             * @type {clause$0.Expr | null}
             */
            this["TableExpr"] = null;
        }
        if (!("Table" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["Table"] = "";
        }
        if (!("Model" in $$source)) {
            /**
             * @member
             * @type {any}
             */
            this["Model"] = null;
        }
        if (!("Unscoped" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["Unscoped"] = false;
        }
        if (!("Dest" in $$source)) {
            /**
             * @member
             * @type {any}
             */
            this["Dest"] = null;
        }
        if (!("ReflectValue" in $$source)) {
            /**
             * @member
             * @type {reflect$0.Value}
             */
            this["ReflectValue"] = (new reflect$0.Value());
        }
        if (!("Clauses" in $$source)) {
            /**
             * @member
             * @type {{ [_: string]: clause$0.Clause }}
             */
            this["Clauses"] = {};
        }
        if (!("BuildClauses" in $$source)) {
            /**
             * @member
             * @type {string[]}
             */
            this["BuildClauses"] = [];
        }
        if (!("Distinct" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["Distinct"] = false;
        }
        if (!("Selects" in $$source)) {
            /**
             * selected columns
             * @member
             * @type {string[]}
             */
            this["Selects"] = [];
        }
        if (!("Omits" in $$source)) {
            /**
             * omit columns
             * @member
             * @type {string[]}
             */
            this["Omits"] = [];
        }
        if (!("ColumnMapping" in $$source)) {
            /**
             * map columns
             * @member
             * @type {{ [_: string]: string }}
             */
            this["ColumnMapping"] = {};
        }
        if (!("Joins" in $$source)) {
            /**
             * @member
             * @type {$internal.join[]}
             */
            this["Joins"] = [];
        }
        if (!("Preloads" in $$source)) {
            /**
             * @member
             * @type {{ [_: string]: any[] }}
             */
            this["Preloads"] = {};
        }
        if (!("Settings" in $$source)) {
            /**
             * @member
             * @type {sync$0.Map}
             */
            this["Settings"] = (new sync$0.Map());
        }
        if (!("ConnPool" in $$source)) {
            /**
             * @member
             * @type {ConnPool}
             */
            this["ConnPool"] = null;
        }
        if (!("Schema" in $$source)) {
            /**
             * @member
             * @type {schema$0.Schema | null}
             */
            this["Schema"] = null;
        }
        if (!("Context" in $$source)) {
            /**
             * @member
             * @type {context$0.Context}
             */
            this["Context"] = null;
        }
        if (!("RaiseErrorOnNotFound" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["RaiseErrorOnNotFound"] = false;
        }
        if (!("SkipHooks" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["SkipHooks"] = false;
        }
        if (!("SQL" in $$source)) {
            /**
             * @member
             * @type {strings$0.Builder}
             */
            this["SQL"] = (new strings$0.Builder());
        }
        if (!("Vars" in $$source)) {
            /**
             * @member
             * @type {any[]}
             */
            this["Vars"] = [];
        }
        if (!("CurDestIndex" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["CurDestIndex"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Statement instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Statement}
     */
    static createFrom($$source = {}) {
        const $$createField16_0 = $$createType0;
        const $$createField18_0 = $$createType1;
        const $$createField21_0 = $$createType3;
        const $$createField22_0 = $$createType5;
        const $$createField27_0 = $$createType6;
        const $$createField28_0 = $$createType8;
        const $$createField29_0 = $$createType9;
        const $$createField31_0 = $$createType9;
        const $$createField32_0 = $$createType9;
        const $$createField33_0 = $$createType10;
        const $$createField34_0 = $$createType12;
        const $$createField35_0 = $$createType14;
        const $$createField36_0 = $$createType15;
        const $$createField38_0 = $$createType17;
        const $$createField42_0 = $$createType18;
        const $$createField43_0 = $$createType13;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("ClauseBuilders" in $$parsedSource) {
            $$parsedSource["ClauseBuilders"] = $$createField16_0($$parsedSource["ClauseBuilders"]);
        }
        if ("Plugins" in $$parsedSource) {
            $$parsedSource["Plugins"] = $$createField18_0($$parsedSource["Plugins"]);
        }
        if ("Statement" in $$parsedSource) {
            $$parsedSource["Statement"] = $$createField21_0($$parsedSource["Statement"]);
        }
        if ("TableExpr" in $$parsedSource) {
            $$parsedSource["TableExpr"] = $$createField22_0($$parsedSource["TableExpr"]);
        }
        if ("ReflectValue" in $$parsedSource) {
            $$parsedSource["ReflectValue"] = $$createField27_0($$parsedSource["ReflectValue"]);
        }
        if ("Clauses" in $$parsedSource) {
            $$parsedSource["Clauses"] = $$createField28_0($$parsedSource["Clauses"]);
        }
        if ("BuildClauses" in $$parsedSource) {
            $$parsedSource["BuildClauses"] = $$createField29_0($$parsedSource["BuildClauses"]);
        }
        if ("Selects" in $$parsedSource) {
            $$parsedSource["Selects"] = $$createField31_0($$parsedSource["Selects"]);
        }
        if ("Omits" in $$parsedSource) {
            $$parsedSource["Omits"] = $$createField32_0($$parsedSource["Omits"]);
        }
        if ("ColumnMapping" in $$parsedSource) {
            $$parsedSource["ColumnMapping"] = $$createField33_0($$parsedSource["ColumnMapping"]);
        }
        if ("Joins" in $$parsedSource) {
            $$parsedSource["Joins"] = $$createField34_0($$parsedSource["Joins"]);
        }
        if ("Preloads" in $$parsedSource) {
            $$parsedSource["Preloads"] = $$createField35_0($$parsedSource["Preloads"]);
        }
        if ("Settings" in $$parsedSource) {
            $$parsedSource["Settings"] = $$createField36_0($$parsedSource["Settings"]);
        }
        if ("Schema" in $$parsedSource) {
            $$parsedSource["Schema"] = $$createField38_0($$parsedSource["Schema"]);
        }
        if ("SQL" in $$parsedSource) {
            $$parsedSource["SQL"] = $$createField42_0($$parsedSource["SQL"]);
        }
        if ("Vars" in $$parsedSource) {
            $$parsedSource["Vars"] = $$createField43_0($$parsedSource["Vars"]);
        }
        return new Statement(/** @type {Partial<Statement>} */($$parsedSource));
    }
}

// Private type creation functions
const $$createType0 = $Create.Map($Create.Any, $Create.Any);
const $$createType1 = $Create.Map($Create.Any, $Create.Any);
const $$createType2 = Statement.createFrom;
const $$createType3 = $Create.Nullable($$createType2);
const $$createType4 = clause$0.Expr.createFrom;
const $$createType5 = $Create.Nullable($$createType4);
const $$createType6 = reflect$0.Value.createFrom;
const $$createType7 = clause$0.Clause.createFrom;
const $$createType8 = $Create.Map($Create.Any, $$createType7);
const $$createType9 = $Create.Array($Create.Any);
const $$createType10 = $Create.Map($Create.Any, $Create.Any);
const $$createType11 = $internal.join.createFrom;
const $$createType12 = $Create.Array($$createType11);
const $$createType13 = $Create.Array($Create.Any);
const $$createType14 = $Create.Map($Create.Any, $$createType13);
const $$createType15 = sync$0.Map.createFrom;
const $$createType16 = schema$0.Schema.createFrom;
const $$createType17 = $Create.Nullable($$createType16);
const $$createType18 = strings$0.Builder.createFrom;
