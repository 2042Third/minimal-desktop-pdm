// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

/**
 * Clause
 */
export class Clause {
    /**
     * Creates a new Clause instance.
     * @param {Partial<Clause>} [$$source = {}] - The source object to create the Clause.
     */
    constructor($$source = {}) {
        if (!("Name" in $$source)) {
            /**
             * WHERE
             * @member
             * @type {string}
             */
            this["Name"] = "";
        }
        if (!("BeforeExpression" in $$source)) {
            /**
             * @member
             * @type {Expression}
             */
            this["BeforeExpression"] = null;
        }
        if (!("AfterNameExpression" in $$source)) {
            /**
             * @member
             * @type {Expression}
             */
            this["AfterNameExpression"] = null;
        }
        if (!("AfterExpression" in $$source)) {
            /**
             * @member
             * @type {Expression}
             */
            this["AfterExpression"] = null;
        }
        if (!("Expression" in $$source)) {
            /**
             * @member
             * @type {Expression}
             */
            this["Expression"] = null;
        }
        if (!("Builder" in $$source)) {
            /**
             * @member
             * @type {ClauseBuilder}
             */
            this["Builder"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Clause instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Clause}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Clause(/** @type {Partial<Clause>} */($$parsedSource));
    }
}

/**
 * ClauseBuilder clause builder, allows to customize how to build clause
 * @typedef {any} ClauseBuilder
 */

/**
 * Expr raw expression
 */
export class Expr {
    /**
     * Creates a new Expr instance.
     * @param {Partial<Expr>} [$$source = {}] - The source object to create the Expr.
     */
    constructor($$source = {}) {
        if (!("SQL" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["SQL"] = "";
        }
        if (!("Vars" in $$source)) {
            /**
             * @member
             * @type {any[]}
             */
            this["Vars"] = [];
        }
        if (!("WithoutParentheses" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["WithoutParentheses"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Expr instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Expr}
     */
    static createFrom($$source = {}) {
        const $$createField1_0 = $$createType0;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("Vars" in $$parsedSource) {
            $$parsedSource["Vars"] = $$createField1_0($$parsedSource["Vars"]);
        }
        return new Expr(/** @type {Partial<Expr>} */($$parsedSource));
    }
}

/**
 * Expression expression interface
 * @typedef {any} Expression
 */

/**
 * Interface clause interface
 * @typedef {any} Interface
 */

/**
 * @readonly
 * @enum {string}
 */
export const JoinType = {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero: "",

    CrossJoin: "CROSS",
    InnerJoin: "INNER",
    LeftJoin: "LEFT",
    RightJoin: "RIGHT",
};

/**
 * Where where clause
 */
export class Where {
    /**
     * Creates a new Where instance.
     * @param {Partial<Where>} [$$source = {}] - The source object to create the Where.
     */
    constructor($$source = {}) {
        if (!("Exprs" in $$source)) {
            /**
             * @member
             * @type {Expression[]}
             */
            this["Exprs"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Where instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Where}
     */
    static createFrom($$source = {}) {
        const $$createField0_0 = $$createType1;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("Exprs" in $$parsedSource) {
            $$parsedSource["Exprs"] = $$createField0_0($$parsedSource["Exprs"]);
        }
        return new Where(/** @type {Partial<Where>} */($$parsedSource));
    }
}

// Private type creation functions
const $$createType0 = $Create.Array($Create.Any);
const $$createType1 = $Create.Array($Create.Any);
