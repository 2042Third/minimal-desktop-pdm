// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

/**
 * Clause
 */
export class Clause {
    /**
     * WHERE
     */
    "Name": string;
    "BeforeExpression": Expression;
    "AfterNameExpression": Expression;
    "AfterExpression": Expression;
    "Expression": Expression;
    "Builder": ClauseBuilder;

    /** Creates a new Clause instance. */
    constructor($$source: Partial<Clause> = {}) {
        if (!("Name" in $$source)) {
            this["Name"] = "";
        }
        if (!("BeforeExpression" in $$source)) {
            this["BeforeExpression"] = null;
        }
        if (!("AfterNameExpression" in $$source)) {
            this["AfterNameExpression"] = null;
        }
        if (!("AfterExpression" in $$source)) {
            this["AfterExpression"] = null;
        }
        if (!("Expression" in $$source)) {
            this["Expression"] = null;
        }
        if (!("Builder" in $$source)) {
            this["Builder"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Clause instance from a string or object.
     */
    static createFrom($$source: any = {}): Clause {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Clause($$parsedSource as Partial<Clause>);
    }
}

/**
 * ClauseBuilder clause builder, allows to customize how to build clause
 */
export type ClauseBuilder = any;

/**
 * Expr raw expression
 */
export class Expr {
    "SQL": string;
    "Vars": any[];
    "WithoutParentheses": boolean;

    /** Creates a new Expr instance. */
    constructor($$source: Partial<Expr> = {}) {
        if (!("SQL" in $$source)) {
            this["SQL"] = "";
        }
        if (!("Vars" in $$source)) {
            this["Vars"] = [];
        }
        if (!("WithoutParentheses" in $$source)) {
            this["WithoutParentheses"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Expr instance from a string or object.
     */
    static createFrom($$source: any = {}): Expr {
        const $$createField1_0 = $$createType0;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("Vars" in $$parsedSource) {
            $$parsedSource["Vars"] = $$createField1_0($$parsedSource["Vars"]);
        }
        return new Expr($$parsedSource as Partial<Expr>);
    }
}

/**
 * Expression expression interface
 */
export type Expression = any;

/**
 * Interface clause interface
 */
export type Interface = any;

export enum JoinType {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero = "",

    CrossJoin = "CROSS",
    InnerJoin = "INNER",
    LeftJoin = "LEFT",
    RightJoin = "RIGHT",
};

/**
 * Where where clause
 */
export class Where {
    "Exprs": Expression[];

    /** Creates a new Where instance. */
    constructor($$source: Partial<Where> = {}) {
        if (!("Exprs" in $$source)) {
            this["Exprs"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Where instance from a string or object.
     */
    static createFrom($$source: any = {}): Where {
        const $$createField0_0 = $$createType1;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("Exprs" in $$parsedSource) {
            $$parsedSource["Exprs"] = $$createField0_0($$parsedSource["Exprs"]);
        }
        return new Where($$parsedSource as Partial<Where>);
    }
}

// Private type creation functions
const $$createType0 = $Create.Array($Create.Any);
const $$createType1 = $Create.Array($Create.Any);
