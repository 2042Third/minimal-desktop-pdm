// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

export class QueryResult {
    "columns": string[];
    "rows": any[][];
    "error": string;

    /** Creates a new QueryResult instance. */
    constructor($$source: Partial<QueryResult> = {}) {
        if (!("columns" in $$source)) {
            this["columns"] = [];
        }
        if (!("rows" in $$source)) {
            this["rows"] = [];
        }
        if (!("error" in $$source)) {
            this["error"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new QueryResult instance from a string or object.
     */
    static createFrom($$source: any = {}): QueryResult {
        const $$createField0_0 = $$createType0;
        const $$createField1_0 = $$createType2;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("columns" in $$parsedSource) {
            $$parsedSource["columns"] = $$createField0_0($$parsedSource["columns"]);
        }
        if ("rows" in $$parsedSource) {
            $$parsedSource["rows"] = $$createField1_0($$parsedSource["rows"]);
        }
        return new QueryResult($$parsedSource as Partial<QueryResult>);
    }
}

export class SQLiteResultOutput {
    "rowsAffected": number;
    "lastInsertId": number;
    "error": string;

    /** Creates a new SQLiteResultOutput instance. */
    constructor($$source: Partial<SQLiteResultOutput> = {}) {
        if (!("rowsAffected" in $$source)) {
            this["rowsAffected"] = 0;
        }
        if (!("lastInsertId" in $$source)) {
            this["lastInsertId"] = 0;
        }
        if (!("error" in $$source)) {
            this["error"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new SQLiteResultOutput instance from a string or object.
     */
    static createFrom($$source: any = {}): SQLiteResultOutput {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new SQLiteResultOutput($$parsedSource as Partial<SQLiteResultOutput>);
    }
}

// Private type creation functions
const $$createType0 = $Create.Array($Create.Any);
const $$createType1 = $Create.Array($Create.Any);
const $$createType2 = $Create.Array($$createType1);
